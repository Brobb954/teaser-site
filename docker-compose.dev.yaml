services:
  watchtower:
    image: containrrr/watchtower
    command:
      - "--label-enable"
      - "--interval"
      - "36000"
      - "--rolling-restart"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - frontend
      - backend

  reverse-proxy:
    image: traefik:v3.1
    command:
      - "--providers.docker"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=brobb@solmarket.info"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - frontend

  frontend:
    build:
      context: ./frontend
      dockerfile: frontend.dockerfile
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.solmarket.rule=Host(`solmarket.info`)"
      - "traefik.http.routers.solmarket.entrypoints=websecure"
      - "traefik.http.routers.solmarket.tls.certresolver=myresolver"
      - "com.centurylinklabs.watchtower.enable=true"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    environment:
      - NODE_ENV=development
    depends_on:
      backend:
        condition: service_healthy
        restart: true
    networks:
      - frontend

  backend:
    build:
      context: ./backend
      dockerfile: backend.dev.dockerfile
    volumes:
      - ./backend:/app
      - /app/go/pkg/mod
    environment:
      - DB_HOST=postgres
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_PORT=5432
      - SERVER_PORT=8080
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - GO_ENV=development
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "/bin/healthcheck"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
    networks:
      - backend

  postgres:
    image: postgres
    restart: always
    user: postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    expose:
      - 5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      start_period: 30s
      retries: 5
    networks:
      - backend

networks:
  frontend:  # Network for frontend and traefik
  backend:   # Internal network for backend services

volumes:
  postgres-data:
  letsencrypt:
