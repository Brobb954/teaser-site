services:
  frontend:
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: frontend.dev.dockerfile
      args:
        BUILDKIT_INLINE_CACHE: 1
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend-http.rule=Host(`solmarket.info`)"
      - "traefik.http.routers.frontend-http.entrypoints=web"
      - "traefik.http.routers.frontend-https.tls=true"
      - "traefik.http.routers.frontend-https.tls.certresolver=cloudflare"
      - "traefik.http.routers.frontend-https.entrypoints=web-secure"
      - "traefik.http.routers.frontend-https.rule=Host(`solmarket.info`)"
    volumes:
      - ./frontend:/usr/src/app:cached
      - frontend-node-modules:/usr/src/app/node_modules
      - frontend-bun-cache:/root/.bun
      - frontend-build-cache:/usr/src/app/.next
    environment:
      - NODE_ENV=development
    depends_on:
      backend:
        condition: service_healthy
        restart: true
    networks:
    - teaser-site

  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: backend.dev.dockerfile
      args:
        BUILDKIT_INLINE_CACHE: 1
    volumes:
      - ./backend:/app:cached
      - backend-go-cache:/root/.cache/go-build
      - backend-go-mod:/go/pkg/mod
    environment:
      - GOCACHE=/root/.cache/go-build
      - GOMODCACHE=/go/pkg/mod
      - DB_HOST=postgres
      - DB_USER=${POSTGRES_USER}
      - DB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_PORT=5432
      - SERVER_PORT=8000
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - GO_ENV=development
    labels:
      - "traefik.enable=true"
      # Router Unsecure
      - "traefik.http.routers.backend.rule=PathPrefix(`/api`)"
      - "traefik.http.routers.backend.service=backend"

      # Service
      - "traefik.http.services.backend.loadbalancer.server.port=8000"

      # Middlewares
      - "traefik.http.middlewares.backend-strip.stripprefix.prefixes=/api"
      - "traefik.http.middlewares.backend-cors.headers.accesscontrolallowmethods=GET,OPTIONS,POST,PATCH"
      - "traefik.http.middlewares.backend-cors.headers.accesscontrolalloworiginlist=*"
      - "traefik.http.middlewares.backend-cors.headers.accesscontrolallowheaders=Accept,Authorization,Content-Type,Origin,Host"

      # Apply middlewares to router
      - "traefik.http.routers.backend.middlewares=backend-strip,backend-cors"
    command: ["air", "-c", ".air.toml"]
    healthcheck:
      test: ["CMD", "/bin/healthcheck"]
      interval: 5s
      timeout: 2s
      retries: 3
      start_period: 30s
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
    networks:
      - teaser-site

  postgres:
    image: postgres
    restart: always
    user: postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    expose:
      - 5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 5s
      timeout: 2s
      start_period: 30s
      retries: 3
    networks:
      - teaser-site

networks:
  teaser-site:
    external:
      true

volumes:
  frontend-node-modules:
  frontend-bun-cache:
  frontend-build-cache:
  backend-go-cache:
  backend-go-mod:
  postgres-data:
  letsencrypt:
