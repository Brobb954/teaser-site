// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package data

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getMarket = `-- name: GetMarket :one
SELECT
  pm.marketId,
  pm.title,
  pm.volume,
  pm.description
FROM
  predictionMarket pm
WHERE
  pm.marketId = $1
`

type GetMarketRow struct {
	Marketid    int32
	Title       pgtype.Text
	Volume      int32
	Description string
}

func (q *Queries) GetMarket(ctx context.Context, marketid int32) (GetMarketRow, error) {
	row := q.db.QueryRow(ctx, getMarket, marketid)
	var i GetMarketRow
	err := row.Scan(
		&i.Marketid,
		&i.Title,
		&i.Volume,
		&i.Description,
	)
	return i, err
}

const getOptions = `-- name: GetOptions :many
SELECT
  po.optionId,
  po.marketId,
  po.optionText,
  po.optionCount
FROM
  predictionOptions po
WHERE
  po.marketId = $1
`

func (q *Queries) GetOptions(ctx context.Context, marketid int32) ([]Predictionoption, error) {
	rows, err := q.db.Query(ctx, getOptions, marketid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Predictionoption
	for rows.Next() {
		var i Predictionoption
		if err := rows.Scan(
			&i.Optionid,
			&i.Marketid,
			&i.Optiontext,
			&i.Optioncount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const incrementCount = `-- name: IncrementCount :execrows
UPDATE predictionOptions
  set optionCount = optionCount + 1
WHERE
  optionId = $1
`

func (q *Queries) IncrementCount(ctx context.Context, optionid int32) (int64, error) {
	result, err := q.db.Exec(ctx, incrementCount, optionid)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const incrementVolume = `-- name: IncrementVolume :execrows
UPDATE predictionMarket
  set volume = volume + 1
WHERE
  marketId = $1
`

func (q *Queries) IncrementVolume(ctx context.Context, marketid int32) (int64, error) {
	result, err := q.db.Exec(ctx, incrementVolume, marketid)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
